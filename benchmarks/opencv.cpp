// generated by Gemini 2.5 Flash
#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <iomanip>
#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main(int argc, char** argv) {
    // 1. 引数確認 (入力パス, 出力パスの2つが必要)
    if (argc != 3) {
        cerr << "Usage: " << argv[0] << " <InputImageFilePath> <OutputImageFilePath>" << endl;
        return 1;
    }

    string input_path = argv[1];
    string output_path = argv[2];

    // 2. 画像をグレースケールで読み込み
    Mat src = imread(input_path, IMREAD_GRAYSCALE);

    if (src.empty()) {
        cerr << "Error: Could not open or find the image: " << input_path << endl;
        return 1;
    }

    // 3. Adaptive Thresholdingの適用と時間計測（100回実行）
    Mat dst;
    vector<double> execution_times;
    
    cout << "Running adaptive threshold 100 times..." << endl;
    
    for (int i = 0; i < 100; i++) {
        int64 start = getTickCount();
        
        adaptiveThreshold(
            src, 
            dst, 
            255, 
            ADAPTIVE_THRESH_MEAN_C, // 平均値ベース
            THRESH_BINARY, 
            3, // 3x3カーネル
            2 // C
        );

        int64 end = getTickCount();
        
        double elapsed_time_sec = (double)(end - start) / getTickFrequency();
        execution_times.push_back(elapsed_time_sec);
    }

    // 4. 実行時間の統計計算
    double sum = 0.0;
    double min_time = execution_times[0];
    double max_time = execution_times[0];
    
    for (double time : execution_times) {
        sum += time;
        if (time < min_time) min_time = time;
        if (time > max_time) max_time = time;
    }
    
    double mean = sum / 100.0;
    
    // 標準偏差の計算
    double variance_sum = 0.0;
    for (double time : execution_times) {
        variance_sum += (time - mean) * (time - mean);
    }
    double std_dev = sqrt(variance_sum / 100.0);
    
    // 5. 統計情報の表示
    cout << "\n=== Execution Time Statistics (100 runs) ===" << endl;
    cout << "Mean: " << fixed << setprecision(6) << mean << " seconds" << endl;
    cout << "Std:  " << fixed << setprecision(6) << std_dev << " seconds" << endl;
    cout << "Min:  " << fixed << setprecision(6) << min_time << " seconds" << endl;
    cout << "Max:  " << fixed << setprecision(6) << max_time << " seconds" << endl;

    // 6. 画像の保存
    if (!imwrite(output_path, dst)) {
        cerr << "Error: Could not save the image: " << output_path << endl;
        return 1;
    }

    cout << "Successfully processed and saved to: " << output_path << endl;
    return 0;
}